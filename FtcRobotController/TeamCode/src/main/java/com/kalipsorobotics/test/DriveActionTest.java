//package com.kalipsorobotics.test;
//
//import android.os.SystemClock;
//import android.util.Log;
//
//import com.kalipsorobotics.actions.drivetrain.DriveAction;
//import com.kalipsorobotics.localization.OdometrySpark;
//import com.kalipsorobotics.modules.DriveTrain;
//import com.kalipsorobotics.utilities.OpModeUtilities;
//import com.qualcomm.hardware.sparkfun.SparkFunOTOS;
//import com.qualcomm.robotcore.eventloop.opmode.Disabled;
//import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
//import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
//
//import java.util.Arrays;
//
//
//@Disabled
//public class DriveActionTest extends LinearOpMode {
//    private LinearOpMode opMode;
//    public OdometrySpark odometryFuse;
//    @Override
//    public void runOpMode() throws InterruptedException {
//        OpModeUtilities opModeUtilities = new OpModeUtilities(hardwareMap,opMode,telemetry);
//        DriveTrain driveTrain = DriveTrain.getInstance(opModeUtilities);
//        DriveAction driveAction = new DriveAction(driveTrain);
//
//        SparkFunOTOS otos = hardwareMap.get(SparkFunOTOS.class, "sprk sensor OTOS");
//        odometryFuse = new OdometrySpark(otos);
//        odometryFuse.configureOtos(otos);
//
////        double[] lastMotorPowers;
////        double[] motorPowersDiff;
//        double[] motorPowers;
//
//        double[] lastLoc;
//        double[] locDiff;
//
//        double lastTime;
//        double deltaTime;
//
//        waitForStart();
//        while (opModeIsActive()) {
////            lastMotorPowers = driveAction.calculatePower(gamepad1);
//
//            motorPowers = driveAction.calculatePower(gamepad1);
//            lastLoc = collectOdomData();
//            lastTime = SystemClock.elapsedRealtimeNanos();
//
//            driveAction.move(gamepad1);
//
////            motorPowersDiff = getDelta(driveAction.calculatePower(gamepad1), lastMotorPowers);
//            locDiff = getDelta(collectOdomData(), lastLoc);
//            deltaTime = SystemClock.elapsedRealtimeNanos() - lastTime;
//
//            if (Arrays.equals(locDiff, new double[3])) {
//                continue;
//            }
//
//            String[] combined = new String[8];
//            for (int i = 0; i < 4; i++) {
//                combined[i] = String.valueOf(motorPowers[i]);
//            }
//            for (int i = 4; i < 7; i++) {
//                combined[i] = String.valueOf(locDiff[i - 4]);
//            }
//            combined[7] = String.valueOf(deltaTime);
//
//            Log.d("odometry",  String.join(",", combined));
//        }
//    }
//
//    private double[] collectOdomData() {
//        return new double[]{
//            odometryFuse.sparkUpdateFiltered().x,
//            odometryFuse.sparkUpdateFiltered().y,
//            odometryFuse.headingUpdateData("right", 0, 0)
//        };
//    }
//
//    private double[] getDelta(double[] currentState, double[] lastState) {
//        double[] diff = new double[currentState.length];
//        for (int i = 0; i < currentState.length; i++) {
//            diff[i] = currentState[i] - lastState[i];
//        }
//        return diff;
//    }
//}
//
//
//// colab link (linreg generated by chatgpt): https://colab.research.google.com/drive/1JFZE5otSvo7AkW0ohzpfhYMI9QlMahlD?usp=sharing